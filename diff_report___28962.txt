diff --git a/CTMOleClient/CTMOleClient.csproj b/CTMOleClient/CTMOleClient.csproj
index 3ff5eb0..eccb023 100644
--- a/CTMOleClient/CTMOleClient.csproj
+++ b/CTMOleClient/CTMOleClient.csproj
@@ -62,16 +62,14 @@
     <Reference Include="System.Xml" />
   </ItemGroup>
   <ItemGroup>
-    <Compile Include="CashUnitInfo.cs" />
-    <Compile Include="ConfigInfo.cs" />
     <Compile Include="CTMWrapper.cs" />
-    <Compile Include="DispenseCashResult.cs" />
     <Compile Include="DllImport.cs" />
     <Compile Include="Enum.cs" />
     <Compile Include="Properties\AssemblyInfo.cs" />
     <Compile Include="StandardAddIn.cs" />
     <Compile Include="Struct.cs" />
     <Compile Include="Utils.cs" />
+    <Compile Include="Wrappers.cs" />
   </ItemGroup>
   <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
 </Project>
\ No newline at end of file
diff --git a/CTMOleClient/CashUnitInfo.cs b/CTMOleClient/CashUnitInfo.cs
deleted file mode 100644
index d3587a0..0000000
--- a/CTMOleClient/CashUnitInfo.cs
+++ /dev/null
@@ -1,18 +0,0 @@
-﻿using System;
-using System.Runtime.InteropServices;
-
-namespace CTMOleClient
-{
-    [ComVisible(true)]
-    [Guid("CCED29B4-D6EA-47A5-A47D-A32C1A7AA11F")]
-    [ProgId("CTMOleClient.CashUnitInfo")]  
-    [ClassInterface(ClassInterfaceType.None)]  
-    public class CashUnitInfo
-    {
-        public int Denomination { get; set; } 
-        public int Count { get; set; }     
-        public string CurrencyCode { get; set; }
-        public int Type { get; set; }        
-        public CashUnitInfo() { }
-    }
-}
\ No newline at end of file
diff --git a/CTMOleClient/ConfigInfo.cs b/CTMOleClient/ConfigInfo.cs
deleted file mode 100644
index 3d978e2..0000000
--- a/CTMOleClient/ConfigInfo.cs
+++ /dev/null
@@ -1,56 +0,0 @@
-﻿using CTMOnCSharp;  // Для CTMConfigurationKeyValue
-using System;
-using System.Runtime.InteropServices;
-
-namespace CTMOleClient
-{
-    [ComVisible(true)]
-    [Guid("F535A143-FA89-4677-99B7-4F52A884AA8E")]
-    [ProgId("CTMOleClient.ConfigInfo")]
-    [ClassInterface(ClassInterfaceType.None)]
-    public class ConfigInfo
-    {
-        public string AcceptedNoteDenominations { get; private set; } = string.Empty;
-        public string AcceptedCoinDenominations { get; private set; } = string.Empty;
-        public string DispensedDenominations { get; private set; } = string.Empty;
-        public string CurrencyCode { get; private set; } = string.Empty;
-        public string LanguageCode { get; private set; } = string.Empty;
-
-        internal ConfigInfo(CTMConfiguration config)
-        {
-            if (config.count == 0) return;
-
-            IntPtr ptr = config.intPtr;
-            int size = Marshal.SizeOf(typeof(CTMConfigurationKeyValue));
-            for (int i = 0; i < config.count; i++)
-            {
-                IntPtr itemPtr = IntPtr.Add(ptr, i * size);
-                CTMConfigurationKeyValue kv = (CTMConfigurationKeyValue)Marshal.PtrToStructure(itemPtr, typeof(CTMConfigurationKeyValue));
-
-                switch (kv.key.Trim().ToLowerInvariant())
-                {
-                    case "accepted note denominations":
-                        AcceptedNoteDenominations = kv.value ?? string.Empty;
-                        break;
-                    case "accepted coin denominations":
-                        AcceptedCoinDenominations = kv.value ?? string.Empty;
-                        break;
-                    case "dispensed denominations":
-                        DispensedDenominations = kv.value ?? string.Empty;
-                        break;
-                    case "currency code":
-                        CurrencyCode = kv.value ?? string.Empty;
-                        break;
-                    case "language code":
-                        LanguageCode = kv.value ?? string.Empty;
-                        break;
-                }
-            }
-        }
-
-        public string ToStringDebug()
-        {
-            return $"Notes: {AcceptedNoteDenominations}; Coins: {AcceptedCoinDenominations}; Dispensed: {DispensedDenominations}; Currency: {CurrencyCode}; Lang: {LanguageCode}";
-        }
-    }
-}
\ No newline at end of file
diff --git a/CTMOleClient/DispenseCashResult.cs b/CTMOleClient/DispenseCashResult.cs
deleted file mode 100644
index 07d37b2..0000000
--- a/CTMOleClient/DispenseCashResult.cs
+++ /dev/null
@@ -1,20 +0,0 @@
-﻿// Новый класс DispenseCashResult.cs (добавьте в проект, как CashUnitInfo.cs)
-using System;
-using System.Runtime.InteropServices;
-using System.Collections;
-
-namespace CTMOleClient
-{
-    [ComVisible(true)]
-    [Guid("23228CED-717C-430D-A0FC-0140E2C3C71F")]
-    [ProgId("CTMOleClient.DispenseCashResult")]
-    [ClassInterface(ClassInterfaceType.None)]
-    public class DispenseCashResult
-    {
-        public int AmountDispensed { get; set; } = 0;  
-        public string Error { get; set; } = "OK";      
-        public ArrayList DispensedUnits { get; set; } = new ArrayList();  
-        public bool Success { get; set; } = false;    
-        public string DeviceError { get; set; } = ""; 
-    }
-}
\ No newline at end of file
diff --git a/CTMOleClient/Enum.cs b/CTMOleClient/Enum.cs
index 179dd53..a080074 100644
--- a/CTMOleClient/Enum.cs
+++ b/CTMOleClient/Enum.cs
@@ -3,6 +3,7 @@ using System.Runtime.InteropServices;
 
 namespace CTMOnCSharp
 {
+    [ComVisible(true)]
     public enum Mode
     {
         INITIALIZE,
@@ -23,12 +24,14 @@ namespace CTMOnCSharp
         DEFAULT
     };
 
+    [ComVisible(true)]
     public enum HardwareType
     {
         R5,
         R6
     }
 
+    [ComVisible(true)]
     public enum CTMInitializationResult
     {
         /** The CTM client successfully connected to the CTM service. */
@@ -59,6 +62,7 @@ namespace CTMOnCSharp
         CTM_INIT_ERROR_UNHANDLED_EXCEPTION = 99
     };
 
+    [ComVisible(true)]
     public enum CTMStartUpCMAppError
     {
         /** The CTM Service was successful in starting up the Cash Management Application. */
@@ -80,6 +84,7 @@ namespace CTMOnCSharp
         CTM_STARTUP_CM_UNHANDLED_EXCEPTION = 99
     };
 
+    [ComVisible(true)]
     public enum CTMBeginTransactionError
     {
         CTM_BEGIN_TRX_SUCCESS,
@@ -89,12 +94,14 @@ namespace CTMOnCSharp
     }
 
     [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
+    [ComVisible(true)]
     public struct CTMBeginTransactionResult
     {
         public CTMBeginTransactionError error;
         public IntPtr transactionId;  // char* из C
     }
 
+    [ComVisible(true)]
     public enum CTMEndTransactionResult
     {
         /** The transaction has ended. */
@@ -122,14 +129,16 @@ namespace CTMOnCSharp
         CTM_ACCEPT_CASH_ERROR_TARGET_AMOUNT_INVALID,
         CTM_ACCEPT_CASH_ERROR_UNHANDLED_EXCEPTION = 99
     };
-
+    
+    [ComVisible(true)]
     public enum CTMCMAppAuthenticationType
     {
         CTM_CM_ATN_TYPE_START_UP,
         CTM_CM_ATN_TYPE_DENY,
         CTM_CM_ATN_TYPE_APPROVE
     }
-
+    
+    [ComVisible(true)]
     public enum CTMStopAcceptingCashResult
     {
         CTM_STOP_ACCEPTING_CASH_SUCCESS,
@@ -138,19 +147,22 @@ namespace CTMOnCSharp
         CTM_STOP_ACCEPTING_CASH_ERROR_UNHANDLED_EXCEPTION = 99
     };
 
+    [ComVisible(true)]
     public enum CTMRefillLocation
     {
         CTM_REFILL_COINS_THROUGH_VALIDATOR = 1,    
         CTM_REFILL_NOTES_THROUGH_VALIDATOR = 2,    
         CTM_REFILL_COINS_THROUGH_COIN_CHUTE = 3   
     };
-
+    
+    [ComVisible(true)]
     public enum CTMCashType
     {
         CTM_CASH_TYPE_NOTE,
         CTM_CASH_TYPE_COIN
     };
 
+    [ComVisible(true)]
     public enum CTMPurgeCoinsError
     {
         CTM_PURGE_COINS_SUCCESS,
@@ -163,6 +175,7 @@ namespace CTMOnCSharp
         CTM_PURGE_COINS_UNHANDLED_EXCEPTION = 99
     };
 
+    [ComVisible(true)]
     public enum CTMPurgeCoinsLocation
     {
         CTM_PURGE_COINS_LOCATION_ALL,
@@ -170,6 +183,7 @@ namespace CTMOnCSharp
         CTM_PURGE_COINS_LOCATION_CASHBOX
     };
 
+    [ComVisible(true)]
     public enum CTMDispenseCashError
     {
         CTM_DISPENSE_CASH_SUCCESS,
@@ -182,6 +196,7 @@ namespace CTMOnCSharp
         CTM_DISPENSE_CASH_ERROR_UNHANDLED_EXCEPTION = 99
     };
 
+    [ComVisible(true)]
     public enum CTMGetCashCountsError
     {
         /** The CTM Service was able to get cash counts. */
@@ -196,6 +211,7 @@ namespace CTMOnCSharp
         CTM_GET_CASH_COUNTS_UNHANDLED_EXCEPTION = 99
     };
 
+    [ComVisible(true)]
     public enum CTMGetLoaderCassetteCountsError
     {
         /** The CTM Service was able to get loader cassette counts. */
@@ -212,6 +228,7 @@ namespace CTMOnCSharp
         CTM_GETLOADERCOUNTS_UNHANDLED_EXCEPTION = 99
     };
 
+    [ComVisible(true)]
     public enum CTMTransferCashError
     {
         /** The CTM Service was able to transfer cash. */
@@ -234,6 +251,7 @@ namespace CTMOnCSharp
         CTM_TRANSFER_UNHANDLED_EXCEPTION = 99
     };
 
+    [ComVisible(true)]
     public enum CTMCashTransferLocation
     {
         CTM_CASH_TRANSFER_LOCATION_NONE = 0,
@@ -256,6 +274,7 @@ namespace CTMOnCSharp
         CTM_CASH_TRANSFER_LOCATION_INDIVIDUAL_BIN = 3
     };
 
+    [ComVisible(true)]
     public enum CTMResetCountsResult
     {
         /** The CTM Service was able to set loader cassette and dispensable counts. */
@@ -270,6 +289,7 @@ namespace CTMOnCSharp
         CTM_RESET_COUNTS_UNHANDLED_EXCEPTION = 99
     };
 
+    [ComVisible(true)]
     public enum CTMSetCountsResult
     {
         /** The CTM Service was able to set loader cassette and dispensable counts. */
@@ -292,6 +312,7 @@ namespace CTMOnCSharp
         CTM_SET_COUNTS_UNHANDLED_EXCEPTION = 99
     };
 
+    [ComVisible(true)]
     public enum CTMClearPurgedStatusResult
     {
         /** The CTM Service was able to clear purge bills. */
@@ -302,6 +323,7 @@ namespace CTMOnCSharp
         CTM_CLEAR_PURGED_STATUS_NOT_CONNECTED
     };
 
+    [ComVisible(true)]
     public enum CTMGetPurgedStatusResult
     {
         /** The CTM Service was able to detect purge bills. */
@@ -312,6 +334,7 @@ namespace CTMOnCSharp
         CTM_GET_PURGED_STATUS_NOT_CONNECTED
     };
 
+    [ComVisible(true)]
     public enum CTMErrorDetailsResult
     {
         CTM_ERROR_DETAILS_SUCCESS = 0,
@@ -325,6 +348,7 @@ namespace CTMOnCSharp
         CTM_ERROR_DETAILS_RUNTIME_ERROR = -6
     };
 
+    [ComVisible(true)]
     public enum CTMDeviceType
     {
         /* CTM_DEVICETYPE_CASHCHANGER = 5,
@@ -356,6 +380,7 @@ namespace CTMOnCSharp
         CTM_DEVICETYPE_MAX_CLASSES = 22
     };
 
+    [ComVisible(true)]
     public enum CTMDeviceTestError
     {
         /** The CTM service was able to test the devices. */
@@ -366,6 +391,7 @@ namespace CTMOnCSharp
         CTM_DEVICE_TEST_ERROR_NOT_CONNECTED
     };
 
+    [ComVisible(true)]
     public enum CTMGetDiagFilesError
     {
         /** The CTM Service was successful in starting up the GetDiagFiles app */
@@ -387,6 +413,7 @@ namespace CTMOnCSharp
         CTM_GET_DIAG_FILES_UNHANDLED_EXCEPTION = 99
     };
 
+    [ComVisible(true)]
     public enum CTMGetCMReceiptDataStatus
     {
         /** The CTM Service was successful in getting CM Receipt data. */
@@ -411,6 +438,7 @@ namespace CTMOnCSharp
         CTM_GET_CM_RECEIPT_DATA_UNHANDLED_EXCEPTION = 99
     };
 
+    [ComVisible(true)]
     public enum CTMCMOperationType
     {
 
@@ -426,17 +454,20 @@ namespace CTMOnCSharp
         CTM_CM_REPORT_DATA
     };
 
+    [ComVisible(true)]
     public enum CTMCMErrorCode
     {
         CTM_CM_SUCCESS = 0,
         CTM_CM_FAILURE
     };
 
+    [ComVisible(true)]
     public enum CTMGetCapacitiesError
     {
         CTM_GET_CAPACITIES_NO_LOADER_CONFIGURED
     };
 
+    [ComVisible(true)]
     public enum CTMClientType
     {
         CTM_POS = 0,
@@ -445,12 +476,14 @@ namespace CTMOnCSharp
         CTM_NULL_TYPE
     };
 
+    [ComVisible(true)]
     public enum CTMBoolean
     {
         CTM_FALSE = 0,
         CTM_TRUE
     }
 
+    [ComVisible(true)]
     public enum CTMAuthenticateResult
     {
         CTM_AUTHENTICATION_USERNAME_IS_INCORRECT = 0,
diff --git a/CTMOleClient/Struct.cs b/CTMOleClient/Struct.cs
index 96d96d3..9bccba7 100644
--- a/CTMOleClient/Struct.cs
+++ b/CTMOleClient/Struct.cs
@@ -3,13 +3,15 @@ using System.Runtime.InteropServices;
 
 namespace CTMOnCSharp
 {
-    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
+    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode, Pack = 1)]
+    [ComVisible(true)]
     public struct CTMGetConfigResult
     {
         public CTMConfiguration config;
     }
 
-    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
+    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode, Pack = 1)]
+    [ComVisible(true)]
     public struct CTMConfiguration
     {
         public int count;
@@ -23,7 +25,8 @@ namespace CTMOnCSharp
         }
     }
 
-    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
+    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode, Pack = 1)]
+    [ComVisible(true)]
     public struct CTMConfigurationKeyValue
     {
         [MarshalAs(UnmanagedType.LPStr)]
@@ -33,14 +36,16 @@ namespace CTMOnCSharp
         public string value;
     }
 
-    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
+    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode, Pack = 1)]
+    [ComVisible(true)]
     public struct CTMStartUpCMAppResult
     {
         public CTMStartUpCMAppError error;
     };
 
 
-    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
+    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode, Pack = 1)]
+    [ComVisible(true)]
     public struct BeginCustomerTransactionResult
     {
         public CTMBeginTransactionError error;
@@ -49,11 +54,12 @@ namespace CTMOnCSharp
     }
 
 
-    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
+    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode, Pack = 1)]
+    [ComVisible(true)]
     public struct CTMDispenseCashResult
     {
         [MarshalAs(UnmanagedType.I4)]
-        public UInt32 amountDispensed;
+        public int amountDispensed;
 
         public CTMCashUnitSet cashUnitSet;
 
@@ -69,7 +75,8 @@ namespace CTMOnCSharp
         }
     };
 
-    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
+    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode, Pack = 1)]
+    [ComVisible(true)]
     public struct CTMBeginCashManagementTransactionRequest
     {
         [MarshalAs(UnmanagedType.LPStr)] public string userId;
@@ -78,7 +85,7 @@ namespace CTMOnCSharp
     };
 
 
-    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
+    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode, Pack = 1)]
     [ComVisible(true)]
     public struct CTMEndRefillResult
     {
@@ -87,13 +94,15 @@ namespace CTMOnCSharp
     }
 
     [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode, Pack = 1)]
+    [ComVisible(true)]
     public struct CTMEventInfo
     {
         [MarshalAs(UnmanagedType.I4)]
-        public UInt32 timestamp;
+        public int timestamp;
     };
 
     [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode, Pack = 1)]
+    [ComVisible(true)]
     public struct CTMAcceptEvent
     {
         [MarshalAs(UnmanagedType.U4)]
@@ -106,6 +115,7 @@ namespace CTMOnCSharp
     };
 
     [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode, Pack = 1)]
+    [ComVisible(true)]
     public struct CTMCashUnit
     {
         public CTMCashType type;
@@ -120,7 +130,8 @@ namespace CTMOnCSharp
         public string currencyCode;
     };
 
-    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
+    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode, Pack = 1)]
+    [ComVisible(true)]
     public struct CTMCashUnitSet
     {
         public int count;
@@ -136,7 +147,8 @@ namespace CTMOnCSharp
         }
     };
 
-    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
+    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode, Pack = 1)]
+    [ComVisible(true)]
     public struct CTMGetCashCountsResult
     {
         public CTMCashUnitSet cashUnitSet;
@@ -144,7 +156,8 @@ namespace CTMOnCSharp
         public CTMGetCashCountsError error;
     };
 
-    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
+    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode, Pack = 1)]
+    [ComVisible(true)]
     public struct CTMGetCapacitiesResult
     {
         public CTMCashUnitSet dispensableCapacities;
@@ -161,7 +174,8 @@ namespace CTMOnCSharp
         public CTMGetCapacitiesError error;
     };
 
-    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
+    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode, Pack = 1)]
+    [ComVisible(true)]
     public struct CTMGetLoaderCassetteCountsResult
     {
         public CTMCashUnitSet loaderCassetteCounts;
@@ -169,7 +183,8 @@ namespace CTMOnCSharp
         public CTMGetLoaderCassetteCountsError error;
     };
 
-    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
+    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode, Pack = 1)]
+    [ComVisible(true)]
     public struct CTMPurgeCoinsResult
     {
         public CTMCashUnitSet purgeCoinCounts;
@@ -177,13 +192,15 @@ namespace CTMOnCSharp
         public CTMPurgeCoinsError error;
     };
 
-    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
+    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode, Pack = 1)]
+    [ComVisible(true)]
     public struct CTMReadFailedNoteCountsResult
     {
         public int failedNoteCounts;
     };
 	
-	[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
+	[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode, Pack = 1)]
+    [ComVisible(true)]
     public struct CTMReadFailedCoinCountsResult
     {
         public int failedCoinCounts;
@@ -191,39 +208,44 @@ namespace CTMOnCSharp
         public CTMGetCashCountsError error;
     };
 
-    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
+    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode, Pack = 1)]
+    [ComVisible(true)]
     public struct CTMTransferFromBinToCashboxResult
     {
         public CTMTransferredCash transferredCash;
         public CTMTransferCashError error;
     };
 
-    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
+    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode, Pack = 1)]
+    [ComVisible(true)]
     public struct CTMTransferAllFromLoaderToCashboxResult 
     {
         public CTMTransferredCash transferredCash;
         public CTMTransferCashError error;
     };
 
-    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
+    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode, Pack = 1)]
+    [ComVisible(true)]
     public struct CTMTransferAllNotesToCashboxResult
     {
         public CTMTransferredCash transferredCash;
         public CTMTransferCashError error;
     };
 
-    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
+    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode, Pack = 1)]
+    [ComVisible(true)]
     public struct CTMTransferredCash
     {
         [MarshalAs(UnmanagedType.I4)]
-        public UInt32 transferredAmount;
+        public int transferredAmount;
 
         public CTMCashUnitSet cashUnitSet;
         public CTMCashTransferLocation source;
         public CTMCashTransferLocation destination;
     };
 
-    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
+    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode, Pack = 1)]
+    [ComVisible(true)]
     public struct CTMDeviceErrorDetails
     {
         public IntPtr intPtr;
@@ -264,6 +286,7 @@ namespace CTMOnCSharp
     };
 
     [StructLayout(LayoutKind.Sequential, Pack = 1)]
+    [ComVisible(true)]
     public struct CTMDeviceError
     {
         public CTMDeviceInfo deviceInfo;
@@ -278,6 +301,7 @@ namespace CTMOnCSharp
     };
 
     [StructLayout(LayoutKind.Sequential, Pack = 1)]
+    [ComVisible(true)]
     public struct CTMDeviceStatus
  	{
  	    public CTMDeviceInfo deviceInfo;
@@ -286,6 +310,7 @@ namespace CTMOnCSharp
  	};
 
     [StructLayout(LayoutKind.Sequential, Pack = 1)]
+    [ComVisible(true)]
     public struct CTMAuthenticationRequest
     {
         [MarshalAs(UnmanagedType.LPStr)]
@@ -296,6 +321,7 @@ namespace CTMOnCSharp
     }
  	
  	[StructLayout(LayoutKind.Sequential, Pack = 1)]
+    [ComVisible(true)]
     public struct CTMDeviceInfo
     {
         public CTMDeviceType deviceType;
@@ -310,6 +336,7 @@ namespace CTMOnCSharp
     };
 
     [StructLayout(LayoutKind.Sequential, Pack = 1)]
+    [ComVisible(true)]
     public struct CTMContextEvent
     {
         [MarshalAs(UnmanagedType.LPStr)]
@@ -321,14 +348,16 @@ namespace CTMOnCSharp
         public IntPtr amountDue;
     }
 
-    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
+    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode, Pack = 1)]
+    [ComVisible(true)]
     public struct CTMDeviceTestResult 
     {
         public CTMDeviceErrorSet deviceErrorSet;
         public CTMDeviceTestError error;
     };
 
-    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
+    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode, Pack = 1)]
+    [ComVisible(true)]
     public struct CTMDeviceErrorSet 
     {
         public int count;
@@ -343,7 +372,8 @@ namespace CTMOnCSharp
         }
     };
 
-    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
+    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode, Pack = 1)]
+    [ComVisible(true)]
     public struct CTMCMOperationResult
     {
         public IntPtr intPtr;
@@ -355,13 +385,15 @@ namespace CTMOnCSharp
         public CTMCMErrorCode error;
     };
 
-    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
+    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode, Pack = 1)]
+    [ComVisible(true)]
     public struct CTMUploadCMDataResult
     {
         public CTMCMOperationResult result;
     };
 
-    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
+    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode, Pack = 1)]
+    [ComVisible(true)]
     public struct CTMDownloadCMDataResult
     {
         public IntPtr intPtr;
@@ -373,13 +405,15 @@ namespace CTMOnCSharp
         public CTMCMOperationResult result;
     };
 
-    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
+    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode, Pack = 1)]
+    [ComVisible(true)]
     public struct CTMGetDiagFilesResult
     {
         public CTMGetDiagFilesError error;
     };
 
-    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
+    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode, Pack = 1)]
+    [ComVisible(true)]
     public struct CTMReceiptFile
     {
         public IntPtr intPtr;
@@ -395,14 +429,16 @@ namespace CTMOnCSharp
         }
     };
 
-    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
+    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode, Pack = 1)]
+    [ComVisible(true)]
     public struct CTMGetCMReceiptDataResult
     {
         public CTMReceiptFile receiptFile;
         public CTMGetCMReceiptDataStatus status;
     };
 
-    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
+    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode, Pack = 1)]
+    [ComVisible(true)]
     public struct CTMAuthenticationEvent
     {
         [MarshalAs(UnmanagedType.LPStr)]
diff --git a/diff_all.patch b/diff_all.patch
deleted file mode 100644
index 5c350c0..0000000
--- a/diff_all.patch
+++ /dev/null
@@ -1,898 +0,0 @@
-diff --git a/CTMOleClient/CTMWrapper.cs b/CTMOleClient/CTMWrapper.cs
-index dcbb675..d2a715b 100644
---- a/CTMOleClient/CTMWrapper.cs
-+++ b/CTMOleClient/CTMWrapper.cs
-@@ -45,7 +45,6 @@ namespace CTMOleClient
- 
-         public CTMWrapper() : base() {}
- 
--
-         private CtmCClient.OnDeviceErrorCallBack _deviceErrorCallback;
-         private CtmCClient.OnCashAcceptCallBack _cashAcceptCallback;
-         private CtmCClient.OnCashAcceptCompleteCallBack _cashAcceptCompleteCallback;
-@@ -62,15 +61,15 @@ namespace CTMOleClient
- 
-         public override void Init(object pConnection)
-         {
-+            LogToFile("Init: called.");
-             SetConnection(pConnection);  
--                                         
-         }
- 
-         public void SetConnection(object pConnection)
-         {
-             _oneCObject = pConnection;  // ЭтаФорма из 1С
-             _uiContext = SynchronizationContext.Current ?? new SynchronizationContext();
--            LogToFile($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] SetConnection: UI Context captured for 1C 8.2 form ({_uiContext.GetType().Name}).");
-+            LogToFile($"SetConnection: UI Context captured for 1C 8.2 form ({_uiContext.GetType().Name}).");
-         }
- 
-         public override void Done()
-@@ -80,14 +79,18 @@ namespace CTMOleClient
-             GC.WaitForPendingFinalizers();
- 
-             base.Done();  
--            LogToFile($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] Done: UI Context freed.");
-+            LogToFile("Done: UI Context freed and finalizers executed.");
-         }
- 
--        public string GetLastError() => _lastError;
-+        public string GetLastError()
-+        {
-+            LogToFile($"GetLastError: returning '{_lastError}'.");
-+            return _lastError;
-+        }
- 
-         public bool Initialize(string clientId, string overrideHost = null, string overridePort = null)
-         {
--            try
-+            LogToFile($"Initialize: called with clientId='{clientId}', overrideHost='{overrideHost ?? "null"}', overridePort='{overridePort ?? "null"}'.");            try
-             {
-                 _lastError = "";
-                 string serviceLocation = overrideHost ?? "localhost";
-@@ -101,46 +104,61 @@ namespace CTMOleClient
-                     AddCallbacks();
-                     _lastError = "OK";
-                     _currentTransactionId = string.Empty;
--                    LogToFile($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] Initialize: SUCCESS on x86 (host: {serviceLocation}, port: {portNumber}).");
-+                    LogToFile($"Initialize: SUCCESS (host: {serviceLocation}, port: {portNumber}).");
-                     return true;
-                 }
-                 _lastError = result.ToString();
--                LogToFile($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] Initialize: FAILED ({result}) (host: {serviceLocation}, port: {portNumber}).");
-+                LogToFile($"Initialize: FAILED ({result}) (host: {serviceLocation}, port: {portNumber}).");
-                 return false;
-             }
-             catch (Exception ex)
-             {
-                 _lastError = ex.Message;
--                LogToFile($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] Initialize: EXCEPTION {ex.Message}.");
-+                LogToFile($"Initialize: EXCEPTION {ex.Message}.");
-                 return false;
-             }
-         }
- 
-         public void Uninitialize()
-         {
--            _uiContext = null; 
--            GC.Collect();      
--            GC.WaitForPendingFinalizers();
-+            LogToFile("Uninitialize: called.");
-+            try
-+            {
-+                UnadviseEvents();  
-+                CtmCClient.Uninitialize();  
-+                _currentTransactionId = string.Empty;
-+                _lastError = "Uninitialized";
-+                _uiContext = null;
- 
--            UnadviseEvents();
--            CtmCClient.Uninitialize();
--            _currentTransactionId = string.Empty;
--            _lastError = "Uninitialized";
--            LogToFile($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] Uninitialize: Called. UI Context freed.");
-+                GC.Collect();
-+                GC.WaitForPendingFinalizers();
-+                GC.Collect();  
-+
-+                LogToFile("Uninitialize: Complete, handlers freed, GC done.");
-+            }
-+            catch (Exception ex)
-+            {
-+                _lastError = ex.Message;
-+                LogToFile($"Uninitialize error: {ex.Message}");
-+            }
-         }
- 
-         public bool Reinitialize(string clientId, string overrideHost = null, string overridePort = null)
-         {
-+            LogToFile($"Reinitialize: called for clientId='{clientId}'.");
-             Uninitialize();
--            return Initialize(clientId, overrideHost, overridePort);
-+            var result = Initialize(clientId, overrideHost, overridePort);
-+            LogToFile($"Reinitialize: result = {(result ? "SUCCESS" : "FAIL")}");
-+            return result;
-         }
- 
-         public string GetConfig(string key)
-         {
-+            LogToFile($"GetConfig: called for key='{key}'.");
-             try
-             {
-                 var configResult = CtmCClient.GetConfig();
--                LogToFile($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] GetConfig: Called.");
-+                LogToFile("GetConfig: native call returned.");
-                 if (configResult.config.count == 0) return string.Empty;
- 
-                 string value = string.Empty;
-@@ -150,7 +168,7 @@ namespace CTMOleClient
-                 {
-                     IntPtr itemPtr = IntPtr.Add(ptr, i * size);
-                     CTMConfigurationKeyValue kv = (CTMConfigurationKeyValue)Marshal.PtrToStructure(itemPtr, typeof(CTMConfigurationKeyValue));
--                    LogToFile($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] {kv.key}: {kv.value} ");
-+                    LogToFile($"{kv.key}: {kv.value}");
- 
-                     if (kv.key == key)
-                     {
-@@ -162,14 +180,17 @@ namespace CTMOleClient
-             }
-             catch
-             {
-+                LogToFile("GetConfig: exception occurred while retrieving key.");
-                 return string.Empty;
-             }
-         }
- 
-         public bool BeginCustomerTransaction(string txnId)
-         {
-+            LogToFile($"BeginCustomerTransaction: called txnId='{txnId}'.");
-             var result = CtmCClient.BeginCustomerTransaction(txnId);
-             _lastError = result.error.ToString();
-+            LogToFile($"BeginCustomerTransaction: result={result.error}.");
-             if (result.error == CTMBeginTransactionError.CTM_BEGIN_TRX_SUCCESS)
-             {
-                 _currentTransactionId = txnId;
-@@ -180,8 +201,10 @@ namespace CTMOleClient
- 
-         public bool EndCustomerTransaction(string txnId)
-         {
-+            LogToFile($"EndCustomerTransaction: called txnId='{txnId}'.");
-             var result = CtmCClient.EndCustomerTransaction(txnId);
-             _lastError = result.ToString();
-+            LogToFile($"EndCustomerTransaction: result={result}.");
-             if (result == CTMEndTransactionResult.CTM_END_TRX_SUCCESS)
-             {
-                 _currentTransactionId = string.Empty;
-@@ -192,27 +215,34 @@ namespace CTMOleClient
- 
-         public bool AcceptCash(int amount)
-         {
-+            LogToFile($"AcceptCash: requested amount={amount}.");
-             var result = CtmCClient.AcceptCash(amount);
-             _lastError = result.ToString();
-+            LogToFile($"AcceptCash: result={result}.");
-             return result == CTMAcceptCashRequestResult.CTM_ACCEPT_CASH_SUCCESS;
-         }
- 
-         public bool StopAcceptingCash()
-         {
-+            LogToFile("StopAcceptingCash: called.");
-             var result = CtmCClient.StopAcceptingCash();
-             _lastError = result.ToString();
-+            LogToFile($"StopAcceptingCash: result={result}.");
-             return result == CTMStopAcceptingCashResult.CTM_STOP_ACCEPTING_CASH_SUCCESS;
-         }
- 
-         public bool DispenseCash(int amount)
-         {
-+            LogToFile($"DispenseCash: requested amount={amount}.");
-             CTMDispenseCashResult result = CtmCClient.DispenseCash(amount);
-             _lastError = result.error.ToString();
-+            LogToFile($"DispenseCash: result={result.error}.");
-             return result.error == CTMDispenseCashError.CTM_DISPENSE_CASH_SUCCESS;
-         }
- 
-         public ArrayList GetDispensableCashCounts()
-         {
-+            LogToFile("GetDispensableCashCounts: called.");
-             var list = new ArrayList();
-             try
-             {
-@@ -220,6 +250,7 @@ namespace CTMOleClient
-                 if (countsResult.error != CTMGetCashCountsError.CTM_GET_CASH_COUNTS_SUCCESS)
-                 {
-                     _lastError = countsResult.error.ToString();
-+                    LogToFile($"GetDispensableCashCounts: native error {countsResult.error}.");
-                     return list;
-                 }
- 
-@@ -245,17 +276,20 @@ namespace CTMOleClient
-                 CtmCClient.FreeCashUnitSetContents(ref cashUnitSet);
- 
-                 _lastError = "OK";
-+                LogToFile($"GetDispensableCashCounts: returned {list.Count} items.");
-                 return list;
-             }
-             catch (Exception ex)
-             {
-                 _lastError = ex.Message;
-+                LogToFile($"GetDispensableCashCounts: exception {ex.Message}.");
-                 return list;
-             }
-         }
- 
-         public ArrayList GetNonDispensableCashCounts()
-         {
-+            LogToFile("GetNonDispensableCashCounts: called.");
-             var list = new ArrayList();
-             try
-             {
-@@ -263,6 +297,7 @@ namespace CTMOleClient
-                 if (countsResult.error != CTMGetCashCountsError.CTM_GET_CASH_COUNTS_SUCCESS)
-                 {
-                     _lastError = countsResult.error.ToString();
-+                    LogToFile($"GetNonDispensableCashCounts: native error {countsResult.error}.");
-                     return list;
-                 }
- 
-@@ -288,25 +323,77 @@ namespace CTMOleClient
-                 CtmCClient.FreeCashUnitSetContents(ref cashUnitSet);
- 
-                 _lastError = "OK";
-+                LogToFile($"GetNonDispensableCashCounts: returned {list.Count} items.");
-                 return list;
-             }
-             catch (Exception ex)
-             {
-                 _lastError = ex.Message;
-+                LogToFile($"GetNonDispensableCashCounts: exception {ex.Message}.");
-                 return list;
-             }
-         }
- 
-         public void AdviseEvents()
-         {
-+            LogToFile("AdviseEvents: called.");
-             _eventsEnabled = true;
--            LogToFile($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] AdviseEvents: ENABLED for 1C x86.");
-+            LogToFile("AdviseEvents: ENABLED for 1C x86.");
-         }
- 
-         public void UnadviseEvents()
-         {
--            _eventsEnabled = false;
--            LogToFile($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] UnadviseEvents: DISABLED.");
-+            LogToFile("UnadviseEvents: called.");
-+            try
-+            {
-+                if (_deviceErrorCallback != null)
-+                {
-+                    CtmCClient.RemoveDeviceErrorEventHandler(_deviceErrorCallback);
-+                    _deviceErrorCallback = null;
-+                }
-+                if (_cashAcceptCallback != null)
-+                {
-+                    CtmCClient.RemoveCashAcceptEventHandler(_cashAcceptCallback);
-+                    _cashAcceptCallback = null;
-+                }
-+                if (_cashAcceptCompleteCallback != null)
-+                {
-+                    CtmCClient.RemoveCashAcceptCompleteEventHandler(_cashAcceptCompleteCallback);
-+                    _cashAcceptCompleteCallback = null;
-+                }
-+                if (_deviceStatusCallback != null)
-+                {
-+                    CtmCClient.RemoveDeviceStatusEventHandler(_deviceStatusCallback);
-+                    _deviceStatusCallback = null;
-+                }
-+                if (_socketClosedCallback != null)
-+                {
-+                    CtmCClient.RemoveSocketClosedEventHandler(_socketClosedCallback);
-+                    _socketClosedCallback = null;
-+                }
-+                if (_changeContextCallback != null)
-+                {
-+                    CtmCClient.RemoveChangeContextEventHandler(_changeContextCallback);
-+                    _changeContextCallback = null;
-+                }
-+                if (_authenticationCallback != null)
-+                {
-+                    CtmCClient.RemoveAuthenticationEventHandler(_authenticationCallback); 
-+                    _authenticationCallback = null;
-+                }
-+                if (_cmClosedCallback != null)
-+                {
-+                    CtmCClient.RemoveCMClosedEventHandler(_cmClosedCallback);
-+                    _cmClosedCallback = null;
-+                }
-+
-+                _eventsEnabled = false;
-+                LogToFile("UnadviseEvents: All handlers removed.");
-+            }
-+            catch (Exception ex)
-+            {
-+                LogToFile($"UnadviseEvents error: {ex.Message}");
-+            }
-         }
- 
-         private void AddCallbacks()
-@@ -464,31 +551,32 @@ namespace CTMOleClient
-         public void SetLogPath(string logPath)
-         {
-             _logPath = string.IsNullOrEmpty(logPath) ? null : logPath;
--            LogToFile($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] Log path set to: {_logPath ?? "disabled"}.");
-         }
- 
-         public string GetLogPath()
-         {
-+            LogToFile($"GetLogPath: returning '{_logPath ?? string.Empty}'.");
-             return _logPath ?? string.Empty;
-         }
- 
-         public object GetFullConfig()
-         {
-+            LogToFile("GetFullConfig: called.");
-             try
-             {
-                 _lastError = "";
-                 var configResult = CtmCClient.GetConfig();
--                LogToFile($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] GetFullConfig: Получен config с {configResult.config.count} записями.");
-+                LogToFile($"GetFullConfig: received config with {configResult.config.count} entries.");
- 
-                 if (configResult.config.count == 0)
-                 {
-                     _lastError = "Config empty";
--                    LogToFile($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] GetFullConfig: Пустой config.");
-+                    LogToFile("GetFullConfig: Config empty.");
-                     return new ConfigInfo(configResult.config);  
-                 }
- 
-                 var configInfo = new ConfigInfo(configResult.config);
--                LogToFile($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] GetFullConfig: Заполнены ключи - Notes: {configInfo.AcceptedNoteDenominations}, Coins: {configInfo.AcceptedCoinDenominations} и т.д.");
-+                LogToFile("GetFullConfig: ConfigInfo constructed.");
- 
-                 _lastError = "OK";
-                 return configInfo;
-@@ -496,7 +584,7 @@ namespace CTMOleClient
-             catch (Exception ex)
-             {
-                 _lastError = ex.Message;
--                LogToFile($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] GetFullConfig: EXCEPTION {ex.Message}.");
-+                LogToFile($"GetFullConfig: EXCEPTION {ex.Message}.");
-                 return new ConfigInfo(new CTMConfiguration { count = 0 });  
-             }
-         }
-diff --git a/diff_all.patch b/diff_all.patch
-index b162d3a..b125c83 100644
---- a/diff_all.patch
-+++ b/diff_all.patch
-@@ -1,529 +0,0 @@
--diff --git a/CTMOleClient/CTMOleClient.csproj b/CTMOleClient/CTMOleClient.csproj
--index 99c39e7..799c742 100644
----- a/CTMOleClient/CTMOleClient.csproj
--+++ b/CTMOleClient/CTMOleClient.csproj
--@@ -63,6 +63,7 @@
--   </ItemGroup>
--   <ItemGroup>
--     <Compile Include="CashUnitInfo.cs" />
--+    <Compile Include="ConfigInfo.cs" />
--     <Compile Include="CTMWrapper.cs" />
--     <Compile Include="DllImport.cs" />
--     <Compile Include="Enum.cs" />
--diff --git a/CTMOleClient/CTMWrapper.cs b/CTMOleClient/CTMWrapper.cs
--index 405da0e..dcbb675 100644
----- a/CTMOleClient/CTMWrapper.cs
--+++ b/CTMOleClient/CTMWrapper.cs
--@@ -32,7 +32,7 @@ namespace CTMOleClient
--         void AdviseEvents();
--         void UnadviseEvents();
--         void SetConnection(object pConnection);
---
--+        object GetFullConfig();
--     }
-- 
--     [ComVisible(true)]
--@@ -50,6 +50,10 @@ namespace CTMOleClient
--         private CtmCClient.OnCashAcceptCallBack _cashAcceptCallback;
--         private CtmCClient.OnCashAcceptCompleteCallBack _cashAcceptCompleteCallback;
--         private CtmCClient.OnDeviceStatusCallBack _deviceStatusCallback;
--+        private CtmCClient.OnSocketClosedCallBack _socketClosedCallback;
--+        private CtmCClient.OnChangeContextCallBack _changeContextCallback;
--+        private CtmCClient.OnAuthenticationCallBack _authenticationCallback;
--+        private CtmCClient.OnCMClosedCallBack _cmClosedCallback;
-- 
--         private string _lastError = string.Empty;
--         private string _currentTransactionId = string.Empty;
--@@ -311,11 +315,20 @@ namespace CTMOleClient
--             _cashAcceptCallback = HandleCashAccept;
--             _cashAcceptCompleteCallback = HandleCashAcceptComplete;
--             _deviceStatusCallback = HandleDeviceStatus;
--+            _socketClosedCallback = HandleSocketClosed;
--+            _changeContextCallback = HandleChangeContext;
--+            _authenticationCallback = HandleAuthentication;
--+            _cmClosedCallback = HandleCMClosed;
-- 
--             CtmCClient.AddDeviceErrorEventHandler(_deviceErrorCallback);
--             CtmCClient.AddCashAcceptEventHandler(_cashAcceptCallback);
--             CtmCClient.AddCashAcceptCompleteEventHandler(_cashAcceptCompleteCallback);
--             CtmCClient.AddDeviceStatusEventHandler(_deviceStatusCallback);
--+           
--+            CtmCClient.AddSocketClosedEventHandler(_socketClosedCallback);
--+            CtmCClient.AddChangeContextEventHandler(_changeContextCallback);
--+            CtmCClient.AddAuthenticationEventHandler(_authenticationCallback);
--+            CtmCClient.AddCMClosedEventHandler(_cmClosedCallback);
--         }
-- 
--         private void HandleDeviceError(CTMEventInfo evtInfo, CTMDeviceError deviceError)
--@@ -356,6 +369,55 @@ namespace CTMOleClient
--                 _uiContext.Post(_ => InvokeOneCEvent("OnDeviceStatus", new object[] { statusInfo }), null);
--             }
--         }
--+       
--+        private void HandleSocketClosed(CTMEventInfo evtInfo)
--+        {
--+            string info = "Соединение с CTM-сервисом закрыто.";
--+            LogToFile($"SocketClosed: {info}");
--+            if (_eventsEnabled && _uiContext != null)
--+            {
--+                _uiContext.Post(_ => InvokeOneCEvent("OnSocketClosed", new object[] { info }), null);
--+            }
--+        }
--+
--+        private void HandleChangeContext(CTMEventInfo evtInfo, CTMContextEvent context)
--+        {
--+            string info = $"Смена контекста: {context.context}, Владелец: {context.clientOwner}";
--+            LogToFile($"ChangeContext: {info}");
--+            if (_eventsEnabled && _uiContext != null)
--+            {
--+                _uiContext.Post(_ => InvokeOneCEvent("OnChangeContext", new object[] { info }), null);
--+            }
--+        }
--+
--+        private void HandleAuthentication(CTMEventInfo evtInfo, CTMAuthenticationEvent authEvent)
--+        {
--+            try
--+            {
--+                bool isHC = (authEvent.isHCashier == CTMBoolean.CTM_TRUE);
--+                string info = $"Аутентификация: Пользователь={authEvent.cmUsername}, HCashier={isHC}";
--+                LogToFile($"Authentication: {info} (пароль скрыт для лога)");
--+
--+                if (_eventsEnabled && _uiContext != null)
--+                {
--+                    _uiContext.Post(_ => InvokeOneCEvent("OnAuthentication", new object[] { authEvent.cmUsername, isHC }), null);
--+                }
--+            }
--+            catch (Exception ex)
--+            {
--+                LogToFile($"HandleAuthentication: Ошибка обработки события - {ex.Message}");
--+            }
--+        }
--+
--+        private void HandleCMClosed(CTMEventInfo evtInfo)
--+        {
--+            string info = "Cash Management приложение закрыто.";
--+            LogToFile($"CMClosed: {info}");
--+            if (_eventsEnabled && _uiContext != null)
--+            {
--+                _uiContext.Post(_ => InvokeOneCEvent("OnCMClosed", new object[] { info }), null);
--+            }
--+        }
-- 
--         private void InvokeOneCEvent(string eventName, object[] parameters)
--         {
--@@ -386,7 +448,6 @@ namespace CTMOleClient
--             }
--         }
-- 
---
--         private void LogToFile(string message)
--         {
--             if (string.IsNullOrEmpty(_logPath)) return; 
--@@ -410,5 +471,34 @@ namespace CTMOleClient
--         {
--             return _logPath ?? string.Empty;
--         }
--+
--+        public object GetFullConfig()
--+        {
--+            try
--+            {
--+                _lastError = "";
--+                var configResult = CtmCClient.GetConfig();
--+                LogToFile($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] GetFullConfig: Получен config с {configResult.config.count} записями.");
--+
--+                if (configResult.config.count == 0)
--+                {
--+                    _lastError = "Config empty";
--+                    LogToFile($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] GetFullConfig: Пустой config.");
--+                    return new ConfigInfo(configResult.config);  
--+                }
--+
--+                var configInfo = new ConfigInfo(configResult.config);
--+                LogToFile($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] GetFullConfig: Заполнены ключи - Notes: {configInfo.AcceptedNoteDenominations}, Coins: {configInfo.AcceptedCoinDenominations} и т.д.");
--+
--+                _lastError = "OK";
--+                return configInfo;
--+            }
--+            catch (Exception ex)
--+            {
--+                _lastError = ex.Message;
--+                LogToFile($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] GetFullConfig: EXCEPTION {ex.Message}.");
--+                return new ConfigInfo(new CTMConfiguration { count = 0 });  
--+            }
--+        }
--     }
-- }
--\ No newline at end of file
--diff --git a/CTMOleClient/CashUnitInfo.cs b/CTMOleClient/CashUnitInfo.cs
--index 2edaaf5..d3587a0 100644
----- a/CTMOleClient/CashUnitInfo.cs
--+++ b/CTMOleClient/CashUnitInfo.cs
--@@ -4,7 +4,7 @@ using System.Runtime.InteropServices;
-- namespace CTMOleClient
-- {
--     [ComVisible(true)]
---    [Guid("A1B2C3D4-E5F6-7890-ABCD-EF1234567890")]  
--+    [Guid("CCED29B4-D6EA-47A5-A47D-A32C1A7AA11F")]
--     [ProgId("CTMOleClient.CashUnitInfo")]  
--     [ClassInterface(ClassInterfaceType.None)]  
--     public class CashUnitInfo
--diff --git a/diff_all.patch b/diff_all.patch
--index 9fbcced..72df1b3 100644
----- a/diff_all.patch
--+++ b/diff_all.patch
--@@ -1,354 +0,0 @@
---diff --git a/CTMOleClient/CTMOleClient.csproj b/CTMOleClient/CTMOleClient.csproj
---index d4bb61d..99c39e7 100644
------ a/CTMOleClient/CTMOleClient.csproj
---+++ b/CTMOleClient/CTMOleClient.csproj
---@@ -62,6 +62,7 @@
---     <Reference Include="System.Xml" />
---   </ItemGroup>
---   <ItemGroup>
---+    <Compile Include="CashUnitInfo.cs" />
---     <Compile Include="CTMWrapper.cs" />
---     <Compile Include="DllImport.cs" />
---     <Compile Include="Enum.cs" />
---diff --git a/CTMOleClient/CTMWrapper.cs b/CTMOleClient/CTMWrapper.cs
---index 7f5c70b..405da0e 100644
------ a/CTMOleClient/CTMWrapper.cs
---+++ b/CTMOleClient/CTMWrapper.cs
---@@ -1,10 +1,12 @@
----﻿using System;
----using System.Runtime.InteropServices;
----using System.Text;
---+﻿using CTMOnCSharp;
---+using System;
---+using System.Collections;
---+using System.Collections.Generic;
--- using System.IO;
--- using System.Reflection;
---+using System.Runtime.InteropServices;
---+using System.Text;
--- using System.Threading;
----using CTMOnCSharp;
--- 
--- namespace CTMOleClient
--- {
---@@ -13,9 +15,11 @@ namespace CTMOleClient
---     [InterfaceType(ComInterfaceType.InterfaceIsDual)]
---     public interface ICTMWrapper
---     {
----        string Initialize(string clientId, string overrideHost = null, string overridePort = null);
---+        bool Initialize(string clientId, string overrideHost = null, string overridePort = null);
---         void Uninitialize();
----        string Reinitialize(string clientId, string overrideHost = null, string overridePort = null);
---+        void SetLogPath(string logPath);
---+        string GetLogPath();
---+        bool Reinitialize(string clientId, string overrideHost = null, string overridePort = null);
---         string GetLastError();
---         string GetConfig(string key);
---         bool BeginCustomerTransaction(string txnId);
---@@ -23,8 +27,8 @@ namespace CTMOleClient
---         bool AcceptCash(int amount);
---         bool StopAcceptingCash();
---         bool DispenseCash(int amount);
----        string GetDispensableCashCounts();
----        string GetNonDispensableCashCounts();
---+        ArrayList GetDispensableCashCounts();
---+        ArrayList GetNonDispensableCashCounts();
---         void AdviseEvents();
---         void UnadviseEvents();
---         void SetConnection(object pConnection);
---@@ -37,7 +41,10 @@ namespace CTMOleClient
---     [ClassInterface(ClassInterfaceType.None)]
---     public class CTMWrapper : StandardAddIn, ICTMWrapper
---     {
----        public CTMWrapper() : base() { }
---+        private string _logPath = null;
---+
---+        public CTMWrapper() : base() {}
---+
--- 
---         private CtmCClient.OnDeviceErrorCallBack _deviceErrorCallback;
---         private CtmCClient.OnCashAcceptCallBack _cashAcceptCallback;
---@@ -64,20 +71,23 @@ namespace CTMOleClient
--- 
---         public override void Done()
---         {
----            _uiContext = null;
----            base.Done();
---+            _uiContext = null;  
---+            GC.Collect();       
---+            GC.WaitForPendingFinalizers();
---+
---+            base.Done();  
---+            LogToFile($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] Done: UI Context freed.");
---         }
--- 
---         public string GetLastError() => _lastError;
--- 
----        public string Initialize(string clientId, string overrideHost = null, string overridePort = null)
---+        public bool Initialize(string clientId, string overrideHost = null, string overridePort = null)
---         {
---             try
---             {
---                 _lastError = "";
----                Utils utils = Utils.Instance;
----                string serviceLocation = overrideHost ?? (utils.Properties.ContainsKey("rpc.host") ? utils.Properties["rpc.host"] : "localhost");
----                string portNumber = overridePort ?? (utils.Properties.ContainsKey("rpc.port") ? utils.Properties["rpc.port"] : "3636");
---+                string serviceLocation = overrideHost ?? "localhost";
---+                string portNumber = overridePort ?? "3636";
---                 string serviceConnection = $"ctm://{serviceLocation}:{portNumber}";
--- 
---                 var result = CtmCClient.Initialize(serviceConnection, clientId, CTMClientType.CTM_POS);
---@@ -87,31 +97,35 @@ namespace CTMOleClient
---                     AddCallbacks();
---                     _lastError = "OK";
---                     _currentTransactionId = string.Empty;
----                    LogToFile($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] Initialize: SUCCESS on x86.");
----                    return "OK";
---+                    LogToFile($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] Initialize: SUCCESS on x86 (host: {serviceLocation}, port: {portNumber}).");
---+                    return true;
---                 }
---                 _lastError = result.ToString();
----                LogToFile($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] Initialize: FAILED ({result}).");
----                return _lastError;
---+                LogToFile($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] Initialize: FAILED ({result}) (host: {serviceLocation}, port: {portNumber}).");
---+                return false;
---             }
---             catch (Exception ex)
---             {
---                 _lastError = ex.Message;
---                 LogToFile($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] Initialize: EXCEPTION {ex.Message}.");
----                return _lastError;
---+                return false;
---             }
---         }
--- 
---         public void Uninitialize()
---         {
---+            _uiContext = null; 
---+            GC.Collect();      
---+            GC.WaitForPendingFinalizers();
---+
---             UnadviseEvents();
---             CtmCClient.Uninitialize();
---             _currentTransactionId = string.Empty;
---             _lastError = "Uninitialized";
----            LogToFile($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] Uninitialize: Called.");
---+            LogToFile($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] Uninitialize: Called. UI Context freed.");
---         }
--- 
----        public string Reinitialize(string clientId, string overrideHost = null, string overridePort = null)
---+        public bool Reinitialize(string clientId, string overrideHost = null, string overridePort = null)
---         {
---             Uninitialize();
---             return Initialize(clientId, overrideHost, overridePort);
---@@ -122,6 +136,7 @@ namespace CTMOleClient
---             try
---             {
---                 var configResult = CtmCClient.GetConfig();
---+                LogToFile($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] GetConfig: Called.");
---                 if (configResult.config.count == 0) return string.Empty;
--- 
---                 string value = string.Empty;
---@@ -131,6 +146,8 @@ namespace CTMOleClient
---                 {
---                     IntPtr itemPtr = IntPtr.Add(ptr, i * size);
---                     CTMConfigurationKeyValue kv = (CTMConfigurationKeyValue)Marshal.PtrToStructure(itemPtr, typeof(CTMConfigurationKeyValue));
---+                    LogToFile($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] {kv.key}: {kv.value} ");
---+
---                     if (kv.key == key)
---                     {
---                         value = kv.value;
---@@ -190,53 +207,89 @@ namespace CTMOleClient
---             return result.error == CTMDispenseCashError.CTM_DISPENSE_CASH_SUCCESS;
---         }
--- 
----        public string GetDispensableCashCounts()
---+        public ArrayList GetDispensableCashCounts()
---         {
---+            var list = new ArrayList();
---             try
---             {
---                 CTMGetCashCountsResult countsResult = CtmCClient.GetDispensableCashCounts();
----                if (countsResult.error != 0) return string.Empty;
---+                if (countsResult.error != CTMGetCashCountsError.CTM_GET_CASH_COUNTS_SUCCESS)
---+                {
---+                    _lastError = countsResult.error.ToString();
---+                    return list;
---+                }
--- 
----                var sb = new StringBuilder("Dispensable Cash Counts:\n");
---                 var cashUnitSet = countsResult.cashUnitSet;
---                 IntPtr ptr = cashUnitSet.intPtr;
---                 int size = Marshal.SizeOf(typeof(CTMCashUnit));
---+
---                 for (int i = 0; i < cashUnitSet.count; i++)
---                 {
---                     IntPtr itemPtr = IntPtr.Add(ptr, i * size);
---                     CTMCashUnit unit = (CTMCashUnit)Marshal.PtrToStructure(itemPtr, typeof(CTMCashUnit));
----                    sb.AppendLine($"Denom: {unit.denomination}, Count: {unit.count}");
---+
---+                    var info = new CashUnitInfo
---+                    {
---+                        Denomination = unit.denomination,
---+                        Count = unit.count,
---+                        Type = (int)unit.type,  // 0=COIN, 1=NOTE
---+                        CurrencyCode = unit.currencyCode
---+                    };
---+                    list.Add(info);
---                 }
----                return sb.ToString();
---+
---+                CtmCClient.FreeCashUnitSetContents(ref cashUnitSet);
---+
---+                _lastError = "OK";
---+                return list;
---             }
----            catch
---+            catch (Exception ex)
---             {
----                return string.Empty;
---+                _lastError = ex.Message;
---+                return list;
---             }
---         }
--- 
----        public string GetNonDispensableCashCounts()
---+        public ArrayList GetNonDispensableCashCounts()
---         {
---+            var list = new ArrayList();
---             try
---             {
---                 CTMGetCashCountsResult countsResult = CtmCClient.GetNonDispensableCashCounts();
----                if (countsResult.error != 0) return string.Empty;
---+                if (countsResult.error != CTMGetCashCountsError.CTM_GET_CASH_COUNTS_SUCCESS)
---+                {
---+                    _lastError = countsResult.error.ToString();
---+                    return list;
---+                }
--- 
----                var sb = new StringBuilder("Non-Dispensable Cash Counts:\n");
---                 var cashUnitSet = countsResult.cashUnitSet;
---                 IntPtr ptr = cashUnitSet.intPtr;
---                 int size = Marshal.SizeOf(typeof(CTMCashUnit));
---+
---                 for (int i = 0; i < cashUnitSet.count; i++)
---                 {
---                     IntPtr itemPtr = IntPtr.Add(ptr, i * size);
---                     CTMCashUnit unit = (CTMCashUnit)Marshal.PtrToStructure(itemPtr, typeof(CTMCashUnit));
----                    sb.AppendLine($"Denom: {unit.denomination}, Count: {unit.count}");
---+
---+                    var info = new CashUnitInfo
---+                    {
---+                        Denomination = unit.denomination,
---+                        Count = unit.count,
---+                        Type = (int)unit.type,  // 0=COIN, 1=NOTE
---+                        CurrencyCode = unit.currencyCode
---+                    };
---+                    list.Add(info);
---                 }
----                return sb.ToString();
---+
---+                CtmCClient.FreeCashUnitSetContents(ref cashUnitSet);
---+
---+                _lastError = "OK";
---+                return list;
---             }
----            catch
---+            catch (Exception ex)
---             {
----                return string.Empty;
---+                _lastError = ex.Message;
---+                return list;
---             }
---         }
--- 
---@@ -310,13 +363,13 @@ namespace CTMOleClient
--- 
---             try
---             {
----                Type type = _oneCObject.GetType();  // Рефлексия на "Форма"
---+                Type type = _oneCObject.GetType();  
---                 type.InvokeMember(eventName, BindingFlags.InvokeMethod, null, _oneCObject, parameters);
---                 LogToFile($"OneC Event {eventName} invoked OK on unmanaged form.");
---             }
---             catch (MissingMethodException ex)
---             {
----                LogToFile($"OneC missing {eventName} on form: {ex.Message}");  // Если процедура не Экспорт
---+                LogToFile($"OneC missing {eventName} on form: {ex.Message}"); 
---             }
---             catch (Exception ex)
---             {
---@@ -333,15 +386,29 @@ namespace CTMOleClient
---             }
---         }
--- 
---+
---         private void LogToFile(string message)
---         {
---+            if (string.IsNullOrEmpty(_logPath)) return; 
---+
---             try
---             {
----                string logPath = @"C:\Temp\CTMLogs.txt";
----                Directory.CreateDirectory(Path.GetDirectoryName(logPath));
----                File.AppendAllText(logPath, $"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] {message}\n");
---+              
---+                Directory.CreateDirectory(Path.GetDirectoryName(_logPath));
---+                File.AppendAllText(_logPath, $"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] {message}\n");
---             }
----            catch { }
---+            catch { }  // Silent fail
---+        }
---+
---+        public void SetLogPath(string logPath)
---+        {
---+            _logPath = string.IsNullOrEmpty(logPath) ? null : logPath;
---+            LogToFile($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] Log path set to: {_logPath ?? "disabled"}.");
---+        }
---+
---+        public string GetLogPath()
---+        {
---+            return _logPath ?? string.Empty;
---         }
---     }
--- }
---\ No newline at end of file
---diff --git a/CTMOleClient/DllImport.cs b/CTMOleClient/DllImport.cs
---index 79fd191..5b57841 100644
------ a/CTMOleClient/DllImport.cs
---+++ b/CTMOleClient/DllImport.cs
---@@ -6,9 +6,7 @@ namespace CTMOnCSharp
---     public partial class CtmCClient
---     {
--- 
----        [DllImport("libctmclient-0.dll", EntryPoint = "ctm_end_customer_transaction", CallingConvention = CallingConvention.Cdecl)]
----        public static extern CTMEndTransactionResult EndCustomerTransaction([MarshalAs(UnmanagedType.LPStr)] string transactionId);
----
---+        
---         [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
---         public delegate void OnCashAcceptCallBack(CTMEventInfo evtInfo, CTMAcceptEvent acceptEvent);
--- 
---@@ -110,7 +108,7 @@ namespace CTMOnCSharp
---         public static extern CTMBeginTransactionResult BeginCustomerTransaction([MarshalAs(UnmanagedType.LPStr)] string transactionId);
--- 
---         [DllImport("libctmclient-0.dll", EntryPoint = "ctm_end_transaction", CallingConvention = CallingConvention.Cdecl)]
----        public static extern CTMEndTransactionResult EndTransaction([MarshalAs(UnmanagedType.LPStr)] string transactionId);
---+        public static extern CTMEndTransactionResult EndCustomerTransaction([MarshalAs(UnmanagedType.LPStr)] string transactionId);
--- 
---         [DllImport("libctmclient-0.dll", EntryPoint = "ctm_accept_cash", CallingConvention = CallingConvention.Cdecl)]
---         public static extern CTMAcceptCashRequestResult AcceptCash([MarshalAs(UnmanagedType.U4)] int targetAmount);
---diff --git a/CTMOleClient/StandardAddIn.cs b/CTMOleClient/StandardAddIn.cs
---index e7dfd45..9b0ae5e 100644
------ a/CTMOleClient/StandardAddIn.cs
---+++ b/CTMOleClient/StandardAddIn.cs
---@@ -23,8 +23,8 @@ namespace CTMOleClient
--- 
---         public virtual void Init(object pConnection)
---         {
----            _oneCObject = pConnection;  // Сохраняем для вызовов из колбеков
----            // Инициализация CTM (Utils.Instance) — перенести в наследника, если нужно
---+            _oneCObject = pConnection;  
---+      
---         }
--- 
---         public virtual void Done()
diff --git a/diff_all.patch.txt b/diff_all.patch.txt
deleted file mode 100644
index 9f5b4e9..0000000
--- a/diff_all.patch.txt
+++ /dev/null
@@ -1,898 +0,0 @@
-﻿diff --git a/CTMOleClient/CTMWrapper.cs b/CTMOleClient/CTMWrapper.cs
-index dcbb675..d2a715b 100644
---- a/CTMOleClient/CTMWrapper.cs
-+++ b/CTMOleClient/CTMWrapper.cs
-@@ -45,7 +45,6 @@ namespace CTMOleClient
- 
-         public CTMWrapper() : base() {}
- 
--
-         private CtmCClient.OnDeviceErrorCallBack _deviceErrorCallback;
-         private CtmCClient.OnCashAcceptCallBack _cashAcceptCallback;
-         private CtmCClient.OnCashAcceptCompleteCallBack _cashAcceptCompleteCallback;
-@@ -62,15 +61,15 @@ namespace CTMOleClient
- 
-         public override void Init(object pConnection)
-         {
-+            LogToFile("Init: called.");
-             SetConnection(pConnection);  
--                                         
-         }
- 
-         public void SetConnection(object pConnection)
-         {
-             _oneCObject = pConnection;  // ЭтаФорма из 1С
-             _uiContext = SynchronizationContext.Current ?? new SynchronizationContext();
--            LogToFile($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] SetConnection: UI Context captured for 1C 8.2 form ({_uiContext.GetType().Name}).");
-+            LogToFile($"SetConnection: UI Context captured for 1C 8.2 form ({_uiContext.GetType().Name}).");
-         }
- 
-         public override void Done()
-@@ -80,14 +79,18 @@ namespace CTMOleClient
-             GC.WaitForPendingFinalizers();
- 
-             base.Done();  
--            LogToFile($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] Done: UI Context freed.");
-+            LogToFile("Done: UI Context freed and finalizers executed.");
-         }
- 
--        public string GetLastError() => _lastError;
-+        public string GetLastError()
-+        {
-+            LogToFile($"GetLastError: returning '{_lastError}'.");
-+            return _lastError;
-+        }
- 
-         public bool Initialize(string clientId, string overrideHost = null, string overridePort = null)
-         {
--            try
-+            LogToFile($"Initialize: called with clientId='{clientId}', overrideHost='{overrideHost ?? "null"}', overridePort='{overridePort ?? "null"}'.");            try
-             {
-                 _lastError = "";
-                 string serviceLocation = overrideHost ?? "localhost";
-@@ -101,46 +104,61 @@ namespace CTMOleClient
-                     AddCallbacks();
-                     _lastError = "OK";
-                     _currentTransactionId = string.Empty;
--                    LogToFile($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] Initialize: SUCCESS on x86 (host: {serviceLocation}, port: {portNumber}).");
-+                    LogToFile($"Initialize: SUCCESS (host: {serviceLocation}, port: {portNumber}).");
-                     return true;
-                 }
-                 _lastError = result.ToString();
--                LogToFile($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] Initialize: FAILED ({result}) (host: {serviceLocation}, port: {portNumber}).");
-+                LogToFile($"Initialize: FAILED ({result}) (host: {serviceLocation}, port: {portNumber}).");
-                 return false;
-             }
-             catch (Exception ex)
-             {
-                 _lastError = ex.Message;
--                LogToFile($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] Initialize: EXCEPTION {ex.Message}.");
-+                LogToFile($"Initialize: EXCEPTION {ex.Message}.");
-                 return false;
-             }
-         }
- 
-         public void Uninitialize()
-         {
--            _uiContext = null; 
--            GC.Collect();      
--            GC.WaitForPendingFinalizers();
-+            LogToFile("Uninitialize: called.");
-+            try
-+            {
-+                UnadviseEvents();  
-+                CtmCClient.Uninitialize();  
-+                _currentTransactionId = string.Empty;
-+                _lastError = "Uninitialized";
-+                _uiContext = null;
- 
--            UnadviseEvents();
--            CtmCClient.Uninitialize();
--            _currentTransactionId = string.Empty;
--            _lastError = "Uninitialized";
--            LogToFile($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] Uninitialize: Called. UI Context freed.");
-+                GC.Collect();
-+                GC.WaitForPendingFinalizers();
-+                GC.Collect();  
-+
-+                LogToFile("Uninitialize: Complete, handlers freed, GC done.");
-+            }
-+            catch (Exception ex)
-+            {
-+                _lastError = ex.Message;
-+                LogToFile($"Uninitialize error: {ex.Message}");
-+            }
-         }
- 
-         public bool Reinitialize(string clientId, string overrideHost = null, string overridePort = null)
-         {
-+            LogToFile($"Reinitialize: called for clientId='{clientId}'.");
-             Uninitialize();
--            return Initialize(clientId, overrideHost, overridePort);
-+            var result = Initialize(clientId, overrideHost, overridePort);
-+            LogToFile($"Reinitialize: result = {(result ? "SUCCESS" : "FAIL")}");
-+            return result;
-         }
- 
-         public string GetConfig(string key)
-         {
-+            LogToFile($"GetConfig: called for key='{key}'.");
-             try
-             {
-                 var configResult = CtmCClient.GetConfig();
--                LogToFile($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] GetConfig: Called.");
-+                LogToFile("GetConfig: native call returned.");
-                 if (configResult.config.count == 0) return string.Empty;
- 
-                 string value = string.Empty;
-@@ -150,7 +168,7 @@ namespace CTMOleClient
-                 {
-                     IntPtr itemPtr = IntPtr.Add(ptr, i * size);
-                     CTMConfigurationKeyValue kv = (CTMConfigurationKeyValue)Marshal.PtrToStructure(itemPtr, typeof(CTMConfigurationKeyValue));
--                    LogToFile($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] {kv.key}: {kv.value} ");
-+                    LogToFile($"{kv.key}: {kv.value}");
- 
-                     if (kv.key == key)
-                     {
-@@ -162,14 +180,17 @@ namespace CTMOleClient
-             }
-             catch
-             {
-+                LogToFile("GetConfig: exception occurred while retrieving key.");
-                 return string.Empty;
-             }
-         }
- 
-         public bool BeginCustomerTransaction(string txnId)
-         {
-+            LogToFile($"BeginCustomerTransaction: called txnId='{txnId}'.");
-             var result = CtmCClient.BeginCustomerTransaction(txnId);
-             _lastError = result.error.ToString();
-+            LogToFile($"BeginCustomerTransaction: result={result.error}.");
-             if (result.error == CTMBeginTransactionError.CTM_BEGIN_TRX_SUCCESS)
-             {
-                 _currentTransactionId = txnId;
-@@ -180,8 +201,10 @@ namespace CTMOleClient
- 
-         public bool EndCustomerTransaction(string txnId)
-         {
-+            LogToFile($"EndCustomerTransaction: called txnId='{txnId}'.");
-             var result = CtmCClient.EndCustomerTransaction(txnId);
-             _lastError = result.ToString();
-+            LogToFile($"EndCustomerTransaction: result={result}.");
-             if (result == CTMEndTransactionResult.CTM_END_TRX_SUCCESS)
-             {
-                 _currentTransactionId = string.Empty;
-@@ -192,27 +215,34 @@ namespace CTMOleClient
- 
-         public bool AcceptCash(int amount)
-         {
-+            LogToFile($"AcceptCash: requested amount={amount}.");
-             var result = CtmCClient.AcceptCash(amount);
-             _lastError = result.ToString();
-+            LogToFile($"AcceptCash: result={result}.");
-             return result == CTMAcceptCashRequestResult.CTM_ACCEPT_CASH_SUCCESS;
-         }
- 
-         public bool StopAcceptingCash()
-         {
-+            LogToFile("StopAcceptingCash: called.");
-             var result = CtmCClient.StopAcceptingCash();
-             _lastError = result.ToString();
-+            LogToFile($"StopAcceptingCash: result={result}.");
-             return result == CTMStopAcceptingCashResult.CTM_STOP_ACCEPTING_CASH_SUCCESS;
-         }
- 
-         public bool DispenseCash(int amount)
-         {
-+            LogToFile($"DispenseCash: requested amount={amount}.");
-             CTMDispenseCashResult result = CtmCClient.DispenseCash(amount);
-             _lastError = result.error.ToString();
-+            LogToFile($"DispenseCash: result={result.error}.");
-             return result.error == CTMDispenseCashError.CTM_DISPENSE_CASH_SUCCESS;
-         }
- 
-         public ArrayList GetDispensableCashCounts()
-         {
-+            LogToFile("GetDispensableCashCounts: called.");
-             var list = new ArrayList();
-             try
-             {
-@@ -220,6 +250,7 @@ namespace CTMOleClient
-                 if (countsResult.error != CTMGetCashCountsError.CTM_GET_CASH_COUNTS_SUCCESS)
-                 {
-                     _lastError = countsResult.error.ToString();
-+                    LogToFile($"GetDispensableCashCounts: native error {countsResult.error}.");
-                     return list;
-                 }
- 
-@@ -245,17 +276,20 @@ namespace CTMOleClient
-                 CtmCClient.FreeCashUnitSetContents(ref cashUnitSet);
- 
-                 _lastError = "OK";
-+                LogToFile($"GetDispensableCashCounts: returned {list.Count} items.");
-                 return list;
-             }
-             catch (Exception ex)
-             {
-                 _lastError = ex.Message;
-+                LogToFile($"GetDispensableCashCounts: exception {ex.Message}.");
-                 return list;
-             }
-         }
- 
-         public ArrayList GetNonDispensableCashCounts()
-         {
-+            LogToFile("GetNonDispensableCashCounts: called.");
-             var list = new ArrayList();
-             try
-             {
-@@ -263,6 +297,7 @@ namespace CTMOleClient
-                 if (countsResult.error != CTMGetCashCountsError.CTM_GET_CASH_COUNTS_SUCCESS)
-                 {
-                     _lastError = countsResult.error.ToString();
-+                    LogToFile($"GetNonDispensableCashCounts: native error {countsResult.error}.");
-                     return list;
-                 }
- 
-@@ -288,25 +323,77 @@ namespace CTMOleClient
-                 CtmCClient.FreeCashUnitSetContents(ref cashUnitSet);
- 
-                 _lastError = "OK";
-+                LogToFile($"GetNonDispensableCashCounts: returned {list.Count} items.");
-                 return list;
-             }
-             catch (Exception ex)
-             {
-                 _lastError = ex.Message;
-+                LogToFile($"GetNonDispensableCashCounts: exception {ex.Message}.");
-                 return list;
-             }
-         }
- 
-         public void AdviseEvents()
-         {
-+            LogToFile("AdviseEvents: called.");
-             _eventsEnabled = true;
--            LogToFile($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] AdviseEvents: ENABLED for 1C x86.");
-+            LogToFile("AdviseEvents: ENABLED for 1C x86.");
-         }
- 
-         public void UnadviseEvents()
-         {
--            _eventsEnabled = false;
--            LogToFile($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] UnadviseEvents: DISABLED.");
-+            LogToFile("UnadviseEvents: called.");
-+            try
-+            {
-+                if (_deviceErrorCallback != null)
-+                {
-+                    CtmCClient.RemoveDeviceErrorEventHandler(_deviceErrorCallback);
-+                    _deviceErrorCallback = null;
-+                }
-+                if (_cashAcceptCallback != null)
-+                {
-+                    CtmCClient.RemoveCashAcceptEventHandler(_cashAcceptCallback);
-+                    _cashAcceptCallback = null;
-+                }
-+                if (_cashAcceptCompleteCallback != null)
-+                {
-+                    CtmCClient.RemoveCashAcceptCompleteEventHandler(_cashAcceptCompleteCallback);
-+                    _cashAcceptCompleteCallback = null;
-+                }
-+                if (_deviceStatusCallback != null)
-+                {
-+                    CtmCClient.RemoveDeviceStatusEventHandler(_deviceStatusCallback);
-+                    _deviceStatusCallback = null;
-+                }
-+                if (_socketClosedCallback != null)
-+                {
-+                    CtmCClient.RemoveSocketClosedEventHandler(_socketClosedCallback);
-+                    _socketClosedCallback = null;
-+                }
-+                if (_changeContextCallback != null)
-+                {
-+                    CtmCClient.RemoveChangeContextEventHandler(_changeContextCallback);
-+                    _changeContextCallback = null;
-+                }
-+                if (_authenticationCallback != null)
-+                {
-+                    CtmCClient.RemoveAuthenticationEventHandler(_authenticationCallback); 
-+                    _authenticationCallback = null;
-+                }
-+                if (_cmClosedCallback != null)
-+                {
-+                    CtmCClient.RemoveCMClosedEventHandler(_cmClosedCallback);
-+                    _cmClosedCallback = null;
-+                }
-+
-+                _eventsEnabled = false;
-+                LogToFile("UnadviseEvents: All handlers removed.");
-+            }
-+            catch (Exception ex)
-+            {
-+                LogToFile($"UnadviseEvents error: {ex.Message}");
-+            }
-         }
- 
-         private void AddCallbacks()
-@@ -464,31 +551,32 @@ namespace CTMOleClient
-         public void SetLogPath(string logPath)
-         {
-             _logPath = string.IsNullOrEmpty(logPath) ? null : logPath;
--            LogToFile($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] Log path set to: {_logPath ?? "disabled"}.");
-         }
- 
-         public string GetLogPath()
-         {
-+            LogToFile($"GetLogPath: returning '{_logPath ?? string.Empty}'.");
-             return _logPath ?? string.Empty;
-         }
- 
-         public object GetFullConfig()
-         {
-+            LogToFile("GetFullConfig: called.");
-             try
-             {
-                 _lastError = "";
-                 var configResult = CtmCClient.GetConfig();
--                LogToFile($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] GetFullConfig: Получен config с {configResult.config.count} записями.");
-+                LogToFile($"GetFullConfig: received config with {configResult.config.count} entries.");
- 
-                 if (configResult.config.count == 0)
-                 {
-                     _lastError = "Config empty";
--                    LogToFile($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] GetFullConfig: Пустой config.");
-+                    LogToFile("GetFullConfig: Config empty.");
-                     return new ConfigInfo(configResult.config);  
-                 }
- 
-                 var configInfo = new ConfigInfo(configResult.config);
--                LogToFile($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] GetFullConfig: Заполнены ключи - Notes: {configInfo.AcceptedNoteDenominations}, Coins: {configInfo.AcceptedCoinDenominations} и т.д.");
-+                LogToFile("GetFullConfig: ConfigInfo constructed.");
- 
-                 _lastError = "OK";
-                 return configInfo;
-@@ -496,7 +584,7 @@ namespace CTMOleClient
-             catch (Exception ex)
-             {
-                 _lastError = ex.Message;
--                LogToFile($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] GetFullConfig: EXCEPTION {ex.Message}.");
-+                LogToFile($"GetFullConfig: EXCEPTION {ex.Message}.");
-                 return new ConfigInfo(new CTMConfiguration { count = 0 });  
-             }
-         }
-diff --git a/diff_all.patch b/diff_all.patch
-index b162d3a..b125c83 100644
---- a/diff_all.patch
-+++ b/diff_all.patch
-@@ -1,529 +0,0 @@
--diff --git a/CTMOleClient/CTMOleClient.csproj b/CTMOleClient/CTMOleClient.csproj
--index 99c39e7..799c742 100644
----- a/CTMOleClient/CTMOleClient.csproj
--+++ b/CTMOleClient/CTMOleClient.csproj
--@@ -63,6 +63,7 @@
--   </ItemGroup>
--   <ItemGroup>
--     <Compile Include="CashUnitInfo.cs" />
--+    <Compile Include="ConfigInfo.cs" />
--     <Compile Include="CTMWrapper.cs" />
--     <Compile Include="DllImport.cs" />
--     <Compile Include="Enum.cs" />
--diff --git a/CTMOleClient/CTMWrapper.cs b/CTMOleClient/CTMWrapper.cs
--index 405da0e..dcbb675 100644
----- a/CTMOleClient/CTMWrapper.cs
--+++ b/CTMOleClient/CTMWrapper.cs
--@@ -32,7 +32,7 @@ namespace CTMOleClient
--         void AdviseEvents();
--         void UnadviseEvents();
--         void SetConnection(object pConnection);
---
--+        object GetFullConfig();
--     }
-- 
--     [ComVisible(true)]
--@@ -50,6 +50,10 @@ namespace CTMOleClient
--         private CtmCClient.OnCashAcceptCallBack _cashAcceptCallback;
--         private CtmCClient.OnCashAcceptCompleteCallBack _cashAcceptCompleteCallback;
--         private CtmCClient.OnDeviceStatusCallBack _deviceStatusCallback;
--+        private CtmCClient.OnSocketClosedCallBack _socketClosedCallback;
--+        private CtmCClient.OnChangeContextCallBack _changeContextCallback;
--+        private CtmCClient.OnAuthenticationCallBack _authenticationCallback;
--+        private CtmCClient.OnCMClosedCallBack _cmClosedCallback;
-- 
--         private string _lastError = string.Empty;
--         private string _currentTransactionId = string.Empty;
--@@ -311,11 +315,20 @@ namespace CTMOleClient
--             _cashAcceptCallback = HandleCashAccept;
--             _cashAcceptCompleteCallback = HandleCashAcceptComplete;
--             _deviceStatusCallback = HandleDeviceStatus;
--+            _socketClosedCallback = HandleSocketClosed;
--+            _changeContextCallback = HandleChangeContext;
--+            _authenticationCallback = HandleAuthentication;
--+            _cmClosedCallback = HandleCMClosed;
-- 
--             CtmCClient.AddDeviceErrorEventHandler(_deviceErrorCallback);
--             CtmCClient.AddCashAcceptEventHandler(_cashAcceptCallback);
--             CtmCClient.AddCashAcceptCompleteEventHandler(_cashAcceptCompleteCallback);
--             CtmCClient.AddDeviceStatusEventHandler(_deviceStatusCallback);
--+           
--+            CtmCClient.AddSocketClosedEventHandler(_socketClosedCallback);
--+            CtmCClient.AddChangeContextEventHandler(_changeContextCallback);
--+            CtmCClient.AddAuthenticationEventHandler(_authenticationCallback);
--+            CtmCClient.AddCMClosedEventHandler(_cmClosedCallback);
--         }
-- 
--         private void HandleDeviceError(CTMEventInfo evtInfo, CTMDeviceError deviceError)
--@@ -356,6 +369,55 @@ namespace CTMOleClient
--                 _uiContext.Post(_ => InvokeOneCEvent("OnDeviceStatus", new object[] { statusInfo }), null);
--             }
--         }
--+       
--+        private void HandleSocketClosed(CTMEventInfo evtInfo)
--+        {
--+            string info = "Соединение с CTM-сервисом закрыто.";
--+            LogToFile($"SocketClosed: {info}");
--+            if (_eventsEnabled && _uiContext != null)
--+            {
--+                _uiContext.Post(_ => InvokeOneCEvent("OnSocketClosed", new object[] { info }), null);
--+            }
--+        }
--+
--+        private void HandleChangeContext(CTMEventInfo evtInfo, CTMContextEvent context)
--+        {
--+            string info = $"Смена контекста: {context.context}, Владелец: {context.clientOwner}";
--+            LogToFile($"ChangeContext: {info}");
--+            if (_eventsEnabled && _uiContext != null)
--+            {
--+                _uiContext.Post(_ => InvokeOneCEvent("OnChangeContext", new object[] { info }), null);
--+            }
--+        }
--+
--+        private void HandleAuthentication(CTMEventInfo evtInfo, CTMAuthenticationEvent authEvent)
--+        {
--+            try
--+            {
--+                bool isHC = (authEvent.isHCashier == CTMBoolean.CTM_TRUE);
--+                string info = $"Аутентификация: Пользователь={authEvent.cmUsername}, HCashier={isHC}";
--+                LogToFile($"Authentication: {info} (пароль скрыт для лога)");
--+
--+                if (_eventsEnabled && _uiContext != null)
--+                {
--+                    _uiContext.Post(_ => InvokeOneCEvent("OnAuthentication", new object[] { authEvent.cmUsername, isHC }), null);
--+                }
--+            }
--+            catch (Exception ex)
--+            {
--+                LogToFile($"HandleAuthentication: Ошибка обработки события - {ex.Message}");
--+            }
--+        }
--+
--+        private void HandleCMClosed(CTMEventInfo evtInfo)
--+        {
--+            string info = "Cash Management приложение закрыто.";
--+            LogToFile($"CMClosed: {info}");
--+            if (_eventsEnabled && _uiContext != null)
--+            {
--+                _uiContext.Post(_ => InvokeOneCEvent("OnCMClosed", new object[] { info }), null);
--+            }
--+        }
-- 
--         private void InvokeOneCEvent(string eventName, object[] parameters)
--         {
--@@ -386,7 +448,6 @@ namespace CTMOleClient
--             }
--         }
-- 
---
--         private void LogToFile(string message)
--         {
--             if (string.IsNullOrEmpty(_logPath)) return; 
--@@ -410,5 +471,34 @@ namespace CTMOleClient
--         {
--             return _logPath ?? string.Empty;
--         }
--+
--+        public object GetFullConfig()
--+        {
--+            try
--+            {
--+                _lastError = "";
--+                var configResult = CtmCClient.GetConfig();
--+                LogToFile($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] GetFullConfig: Получен config с {configResult.config.count} записями.");
--+
--+                if (configResult.config.count == 0)
--+                {
--+                    _lastError = "Config empty";
--+                    LogToFile($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] GetFullConfig: Пустой config.");
--+                    return new ConfigInfo(configResult.config);  
--+                }
--+
--+                var configInfo = new ConfigInfo(configResult.config);
--+                LogToFile($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] GetFullConfig: Заполнены ключи - Notes: {configInfo.AcceptedNoteDenominations}, Coins: {configInfo.AcceptedCoinDenominations} и т.д.");
--+
--+                _lastError = "OK";
--+                return configInfo;
--+            }
--+            catch (Exception ex)
--+            {
--+                _lastError = ex.Message;
--+                LogToFile($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] GetFullConfig: EXCEPTION {ex.Message}.");
--+                return new ConfigInfo(new CTMConfiguration { count = 0 });  
--+            }
--+        }
--     }
-- }
--\ No newline at end of file
--diff --git a/CTMOleClient/CashUnitInfo.cs b/CTMOleClient/CashUnitInfo.cs
--index 2edaaf5..d3587a0 100644
----- a/CTMOleClient/CashUnitInfo.cs
--+++ b/CTMOleClient/CashUnitInfo.cs
--@@ -4,7 +4,7 @@ using System.Runtime.InteropServices;
-- namespace CTMOleClient
-- {
--     [ComVisible(true)]
---    [Guid("A1B2C3D4-E5F6-7890-ABCD-EF1234567890")]  
--+    [Guid("CCED29B4-D6EA-47A5-A47D-A32C1A7AA11F")]
--     [ProgId("CTMOleClient.CashUnitInfo")]  
--     [ClassInterface(ClassInterfaceType.None)]  
--     public class CashUnitInfo
--diff --git a/diff_all.patch b/diff_all.patch
--index 9fbcced..72df1b3 100644
----- a/diff_all.patch
--+++ b/diff_all.patch
--@@ -1,354 +0,0 @@
---diff --git a/CTMOleClient/CTMOleClient.csproj b/CTMOleClient/CTMOleClient.csproj
---index d4bb61d..99c39e7 100644
------ a/CTMOleClient/CTMOleClient.csproj
---+++ b/CTMOleClient/CTMOleClient.csproj
---@@ -62,6 +62,7 @@
---     <Reference Include="System.Xml" />
---   </ItemGroup>
---   <ItemGroup>
---+    <Compile Include="CashUnitInfo.cs" />
---     <Compile Include="CTMWrapper.cs" />
---     <Compile Include="DllImport.cs" />
---     <Compile Include="Enum.cs" />
---diff --git a/CTMOleClient/CTMWrapper.cs b/CTMOleClient/CTMWrapper.cs
---index 7f5c70b..405da0e 100644
------ a/CTMOleClient/CTMWrapper.cs
---+++ b/CTMOleClient/CTMWrapper.cs
---@@ -1,10 +1,12 @@
----﻿using System;
----using System.Runtime.InteropServices;
----using System.Text;
---+﻿using CTMOnCSharp;
---+using System;
---+using System.Collections;
---+using System.Collections.Generic;
--- using System.IO;
--- using System.Reflection;
---+using System.Runtime.InteropServices;
---+using System.Text;
--- using System.Threading;
----using CTMOnCSharp;
--- 
--- namespace CTMOleClient
--- {
---@@ -13,9 +15,11 @@ namespace CTMOleClient
---     [InterfaceType(ComInterfaceType.InterfaceIsDual)]
---     public interface ICTMWrapper
---     {
----        string Initialize(string clientId, string overrideHost = null, string overridePort = null);
---+        bool Initialize(string clientId, string overrideHost = null, string overridePort = null);
---         void Uninitialize();
----        string Reinitialize(string clientId, string overrideHost = null, string overridePort = null);
---+        void SetLogPath(string logPath);
---+        string GetLogPath();
---+        bool Reinitialize(string clientId, string overrideHost = null, string overridePort = null);
---         string GetLastError();
---         string GetConfig(string key);
---         bool BeginCustomerTransaction(string txnId);
---@@ -23,8 +27,8 @@ namespace CTMOleClient
---         bool AcceptCash(int amount);
---         bool StopAcceptingCash();
---         bool DispenseCash(int amount);
----        string GetDispensableCashCounts();
----        string GetNonDispensableCashCounts();
---+        ArrayList GetDispensableCashCounts();
---+        ArrayList GetNonDispensableCashCounts();
---         void AdviseEvents();
---         void UnadviseEvents();
---         void SetConnection(object pConnection);
---@@ -37,7 +41,10 @@ namespace CTMOleClient
---     [ClassInterface(ClassInterfaceType.None)]
---     public class CTMWrapper : StandardAddIn, ICTMWrapper
---     {
----        public CTMWrapper() : base() { }
---+        private string _logPath = null;
---+
---+        public CTMWrapper() : base() {}
---+
--- 
---         private CtmCClient.OnDeviceErrorCallBack _deviceErrorCallback;
---         private CtmCClient.OnCashAcceptCallBack _cashAcceptCallback;
---@@ -64,20 +71,23 @@ namespace CTMOleClient
--- 
---         public override void Done()
---         {
----            _uiContext = null;
----            base.Done();
---+            _uiContext = null;  
---+            GC.Collect();       
---+            GC.WaitForPendingFinalizers();
---+
---+            base.Done();  
---+            LogToFile($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] Done: UI Context freed.");
---         }
--- 
---         public string GetLastError() => _lastError;
--- 
----        public string Initialize(string clientId, string overrideHost = null, string overridePort = null)
---+        public bool Initialize(string clientId, string overrideHost = null, string overridePort = null)
---         {
---             try
---             {
---                 _lastError = "";
----                Utils utils = Utils.Instance;
----                string serviceLocation = overrideHost ?? (utils.Properties.ContainsKey("rpc.host") ? utils.Properties["rpc.host"] : "localhost");
----                string portNumber = overridePort ?? (utils.Properties.ContainsKey("rpc.port") ? utils.Properties["rpc.port"] : "3636");
---+                string serviceLocation = overrideHost ?? "localhost";
---+                string portNumber = overridePort ?? "3636";
---                 string serviceConnection = $"ctm://{serviceLocation}:{portNumber}";
--- 
---                 var result = CtmCClient.Initialize(serviceConnection, clientId, CTMClientType.CTM_POS);
---@@ -87,31 +97,35 @@ namespace CTMOleClient
---                     AddCallbacks();
---                     _lastError = "OK";
---                     _currentTransactionId = string.Empty;
----                    LogToFile($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] Initialize: SUCCESS on x86.");
----                    return "OK";
---+                    LogToFile($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] Initialize: SUCCESS on x86 (host: {serviceLocation}, port: {portNumber}).");
---+                    return true;
---                 }
---                 _lastError = result.ToString();
----                LogToFile($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] Initialize: FAILED ({result}).");
----                return _lastError;
---+                LogToFile($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] Initialize: FAILED ({result}) (host: {serviceLocation}, port: {portNumber}).");
---+                return false;
---             }
---             catch (Exception ex)
---             {
---                 _lastError = ex.Message;
---                 LogToFile($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] Initialize: EXCEPTION {ex.Message}.");
----                return _lastError;
---+                return false;
---             }
---         }
--- 
---         public void Uninitialize()
---         {
---+            _uiContext = null; 
---+            GC.Collect();      
---+            GC.WaitForPendingFinalizers();
---+
---             UnadviseEvents();
---             CtmCClient.Uninitialize();
---             _currentTransactionId = string.Empty;
---             _lastError = "Uninitialized";
----            LogToFile($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] Uninitialize: Called.");
---+            LogToFile($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] Uninitialize: Called. UI Context freed.");
---         }
--- 
----        public string Reinitialize(string clientId, string overrideHost = null, string overridePort = null)
---+        public bool Reinitialize(string clientId, string overrideHost = null, string overridePort = null)
---         {
---             Uninitialize();
---             return Initialize(clientId, overrideHost, overridePort);
---@@ -122,6 +136,7 @@ namespace CTMOleClient
---             try
---             {
---                 var configResult = CtmCClient.GetConfig();
---+                LogToFile($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] GetConfig: Called.");
---                 if (configResult.config.count == 0) return string.Empty;
--- 
---                 string value = string.Empty;
---@@ -131,6 +146,8 @@ namespace CTMOleClient
---                 {
---                     IntPtr itemPtr = IntPtr.Add(ptr, i * size);
---                     CTMConfigurationKeyValue kv = (CTMConfigurationKeyValue)Marshal.PtrToStructure(itemPtr, typeof(CTMConfigurationKeyValue));
---+                    LogToFile($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] {kv.key}: {kv.value} ");
---+
---                     if (kv.key == key)
---                     {
---                         value = kv.value;
---@@ -190,53 +207,89 @@ namespace CTMOleClient
---             return result.error == CTMDispenseCashError.CTM_DISPENSE_CASH_SUCCESS;
---         }
--- 
----        public string GetDispensableCashCounts()
---+        public ArrayList GetDispensableCashCounts()
---         {
---+            var list = new ArrayList();
---             try
---             {
---                 CTMGetCashCountsResult countsResult = CtmCClient.GetDispensableCashCounts();
----                if (countsResult.error != 0) return string.Empty;
---+                if (countsResult.error != CTMGetCashCountsError.CTM_GET_CASH_COUNTS_SUCCESS)
---+                {
---+                    _lastError = countsResult.error.ToString();
---+                    return list;
---+                }
--- 
----                var sb = new StringBuilder("Dispensable Cash Counts:\n");
---                 var cashUnitSet = countsResult.cashUnitSet;
---                 IntPtr ptr = cashUnitSet.intPtr;
---                 int size = Marshal.SizeOf(typeof(CTMCashUnit));
---+
---                 for (int i = 0; i < cashUnitSet.count; i++)
---                 {
---                     IntPtr itemPtr = IntPtr.Add(ptr, i * size);
---                     CTMCashUnit unit = (CTMCashUnit)Marshal.PtrToStructure(itemPtr, typeof(CTMCashUnit));
----                    sb.AppendLine($"Denom: {unit.denomination}, Count: {unit.count}");
---+
---+                    var info = new CashUnitInfo
---+                    {
---+                        Denomination = unit.denomination,
---+                        Count = unit.count,
---+                        Type = (int)unit.type,  // 0=COIN, 1=NOTE
---+                        CurrencyCode = unit.currencyCode
---+                    };
---+                    list.Add(info);
---                 }
----                return sb.ToString();
---+
---+                CtmCClient.FreeCashUnitSetContents(ref cashUnitSet);
---+
---+                _lastError = "OK";
---+                return list;
---             }
----            catch
---+            catch (Exception ex)
---             {
----                return string.Empty;
---+                _lastError = ex.Message;
---+                return list;
---             }
---         }
--- 
----        public string GetNonDispensableCashCounts()
---+        public ArrayList GetNonDispensableCashCounts()
---         {
---+            var list = new ArrayList();
---             try
---             {
---                 CTMGetCashCountsResult countsResult = CtmCClient.GetNonDispensableCashCounts();
----                if (countsResult.error != 0) return string.Empty;
---+                if (countsResult.error != CTMGetCashCountsError.CTM_GET_CASH_COUNTS_SUCCESS)
---+                {
---+                    _lastError = countsResult.error.ToString();
---+                    return list;
---+                }
--- 
----                var sb = new StringBuilder("Non-Dispensable Cash Counts:\n");
---                 var cashUnitSet = countsResult.cashUnitSet;
---                 IntPtr ptr = cashUnitSet.intPtr;
---                 int size = Marshal.SizeOf(typeof(CTMCashUnit));
---+
---                 for (int i = 0; i < cashUnitSet.count; i++)
---                 {
---                     IntPtr itemPtr = IntPtr.Add(ptr, i * size);
---                     CTMCashUnit unit = (CTMCashUnit)Marshal.PtrToStructure(itemPtr, typeof(CTMCashUnit));
----                    sb.AppendLine($"Denom: {unit.denomination}, Count: {unit.count}");
---+
---+                    var info = new CashUnitInfo
---+                    {
---+                        Denomination = unit.denomination,
---+                        Count = unit.count,
---+                        Type = (int)unit.type,  // 0=COIN, 1=NOTE
---+                        CurrencyCode = unit.currencyCode
---+                    };
---+                    list.Add(info);
---                 }
----                return sb.ToString();
---+
---+                CtmCClient.FreeCashUnitSetContents(ref cashUnitSet);
---+
---+                _lastError = "OK";
---+                return list;
---             }
----            catch
---+            catch (Exception ex)
---             {
----                return string.Empty;
---+                _lastError = ex.Message;
---+                return list;
---             }
---         }
--- 
---@@ -310,13 +363,13 @@ namespace CTMOleClient
--- 
---             try
---             {
----                Type type = _oneCObject.GetType();  // Рефлексия на "Форма"
---+                Type type = _oneCObject.GetType();  
---                 type.InvokeMember(eventName, BindingFlags.InvokeMethod, null, _oneCObject, parameters);
---                 LogToFile($"OneC Event {eventName} invoked OK on unmanaged form.");
---             }
---             catch (MissingMethodException ex)
---             {
----                LogToFile($"OneC missing {eventName} on form: {ex.Message}");  // Если процедура не Экспорт
---+                LogToFile($"OneC missing {eventName} on form: {ex.Message}"); 
---             }
---             catch (Exception ex)
---             {
---@@ -333,15 +386,29 @@ namespace CTMOleClient
---             }
---         }
--- 
---+
---         private void LogToFile(string message)
---         {
---+            if (string.IsNullOrEmpty(_logPath)) return; 
---+
---             try
---             {
----                string logPath = @"C:\Temp\CTMLogs.txt";
----                Directory.CreateDirectory(Path.GetDirectoryName(logPath));
----                File.AppendAllText(logPath, $"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] {message}\n");
---+              
---+                Directory.CreateDirectory(Path.GetDirectoryName(_logPath));
---+                File.AppendAllText(_logPath, $"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] {message}\n");
---             }
----            catch { }
---+            catch { }  // Silent fail
---+        }
---+
---+        public void SetLogPath(string logPath)
---+        {
---+            _logPath = string.IsNullOrEmpty(logPath) ? null : logPath;
---+            LogToFile($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] Log path set to: {_logPath ?? "disabled"}.");
---+        }
---+
---+        public string GetLogPath()
---+        {
---+            return _logPath ?? string.Empty;
---         }
---     }
--- }
---\ No newline at end of file
---diff --git a/CTMOleClient/DllImport.cs b/CTMOleClient/DllImport.cs
---index 79fd191..5b57841 100644
------ a/CTMOleClient/DllImport.cs
---+++ b/CTMOleClient/DllImport.cs
---@@ -6,9 +6,7 @@ namespace CTMOnCSharp
---     public partial class CtmCClient
---     {
--- 
----        [DllImport("libctmclient-0.dll", EntryPoint = "ctm_end_customer_transaction", CallingConvention = CallingConvention.Cdecl)]
----        public static extern CTMEndTransactionResult EndCustomerTransaction([MarshalAs(UnmanagedType.LPStr)] string transactionId);
----
---+        
---         [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
---         public delegate void OnCashAcceptCallBack(CTMEventInfo evtInfo, CTMAcceptEvent acceptEvent);
--- 
---@@ -110,7 +108,7 @@ namespace CTMOnCSharp
---         public static extern CTMBeginTransactionResult BeginCustomerTransaction([MarshalAs(UnmanagedType.LPStr)] string transactionId);
--- 
---         [DllImport("libctmclient-0.dll", EntryPoint = "ctm_end_transaction", CallingConvention = CallingConvention.Cdecl)]
----        public static extern CTMEndTransactionResult EndTransaction([MarshalAs(UnmanagedType.LPStr)] string transactionId);
---+        public static extern CTMEndTransactionResult EndCustomerTransaction([MarshalAs(UnmanagedType.LPStr)] string transactionId);
--- 
---         [DllImport("libctmclient-0.dll", EntryPoint = "ctm_accept_cash", CallingConvention = CallingConvention.Cdecl)]
---         public static extern CTMAcceptCashRequestResult AcceptCash([MarshalAs(UnmanagedType.U4)] int targetAmount);
---diff --git a/CTMOleClient/StandardAddIn.cs b/CTMOleClient/StandardAddIn.cs
---index e7dfd45..9b0ae5e 100644
------ a/CTMOleClient/StandardAddIn.cs
---+++ b/CTMOleClient/StandardAddIn.cs
---@@ -23,8 +23,8 @@ namespace CTMOleClient
--- 
---         public virtual void Init(object pConnection)
---         {
----            _oneCObject = pConnection;  // Сохраняем для вызовов из колбеков
----            // Инициализация CTM (Utils.Instance) — перенести в наследника, если нужно
---+            _oneCObject = pConnection;  
---+      
---         }
--- 
---         public virtual void Done()
